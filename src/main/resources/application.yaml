server:
  port: 8009
  servlet:
    context-path: /SynoVision
spring:
  #开放更大的文件上传体积
  servlet:
    multipart:
      max-file-size: 10MB
  profiles:
    active: local
  application:
    name: SynoVision
   # 空间图片分表
  shardingsphere:
    datasource:
      names: synovision
      synovision:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/synovision
        username: sean
        password: 123456
    rules:
      sharding:
        tables:
          picture:
            actual-data-nodes: synovision.picture # 动态分表
            table-strategy:
              standard:
                sharding-column: spaceId
                sharding-algorithm-name: picture_sharding_algorithm  # 使用自定义分片算法
        sharding-algorithms:
          picture_sharding_algorithm:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.sean.synovision.manager.sharding.PictureShardingAlgorithm
    props:
      sql-show: true
  #数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/synovision
    username: sean
    password: 123456
  # Redis 配置
  redis:
    database: 5
    host: localhost
    port: 6379
    timeout: 5000
    password: 123456
# mybatis-plus配置
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: isDeleted  # 全局逻辑删除的实体字段名
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
# 接口文档
knife4j:
  enable: true
  openapi:
    title: SynoVision
    version: 1.0
    group:
      default:
        api-rule: package
        api-rule-resources:
          - com.sean.synovision.controller
# Cos配置
cos:
  client:
    host: xxx
    secretId: xxxx
    secretKey: xxx
    region: xxx
    bucketName: xxx
aliYunAi:
  apiKey: xxx

